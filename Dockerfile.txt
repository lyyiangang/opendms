# sudo docker build -f Dockerfile.txt -t opendms . 
FROM ubuntu:18.04
RUN apt-get update 
RUN apt-get install -y cmake git libgtk2.0-dev \
    libgtk-3-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev python-dev python-numpy \
    libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev wget

RUN apt-get install -y unzip zip 
WORKDIR /
# RUN wget https://github.com/opencv/opencv/archive/4.5.1.zip 
RUN git clone --depth 1 --branch 4.5.1 https://gitee.com/lyyiangang/opencv.git
# build opencv for x86
RUN cd opencv && mkdir build && cd build && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON \
    -DCMAKE_INSTALL_PREFIX=/install_x86 \
    -D WITH_V4L=ON  -DBUILD_TIFF=ON -DWITH_GTK_2_X=ON .. && \
    make -j3 install

# build opencv for aarch64 system
WORKDIR /
RUN wget https://releases.linaro.org/components/toolchain/binaries/7.5-2019.12/aarch64-linux-gnu/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz  -O aarch64.tar.xz  && \
    tar -xvf aarch64.tar.xz

ENV cross_compile_toolchain=/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu
RUN cd opencv && mkdir build_aarch64 && cd build_aarch64 && cmake .. \
    -DCMAKE_TOOLCHAIN_FILE=../platforms/linux/aarch64-gnu.toolchain.cmake \
	-DCMAKE_C_COMPILER=${cross_compile_toolchain}/bin/aarch64-linux-gnu-gcc \
	-DCMAKE_CXX_COMPILER=${cross_compile_toolchain}/bin/aarch64-linux-gnu-g++ \
    -DCMAKE_INSTALL_PREFIX=/install_aarch64 \
    -DWITH_TBB=ON \
    -DWITH_V4L=ON  \
    -DBUILD_TIFF=ON \
    -DBUILD_TESTS=OFF \
    -DBUILD_PERF_TESTS=OFF \
    -DWITH_GTK_2_X=ON &&\
	make -j3 install

# install protobuf for MNN
WORKDIR /
RUN git clone --depth 1 --branch v3.15.6 https://gitee.com/lyyiangang/protobuf.git
RUN cd protobuf/ && \
    ./autogen.sh && \
    ./configure &&  \
    make install && ldconfig

# build MNN x86
WORKDIR /
RUN git clone https://gitee.com/lyyiangang/cmake_install_script.git && cd cmake_install_script && /bin/bash cmake-3.20.0-rc3-linux-x86_64.sh --skip-license --prefix=/usr/
WORKDIR /
RUN git clone --depth 1 --branch 1.1.3 https://gitee.com/zeekim/MNN.git
# install cmake to /usr/bin, MNN need newer cmake
RUN cd MNN/ && ./schema/generate.sh && \
    mkdir build && cd build && cmake .. \
    -DCMAKE_INSTALL_PREFIX=/install_x86 \
    -DMNN_BUILD_CONVERTER=true \
    -DCMAKE_BUILD_TYPE=Release \
	-DMNN_BUILD_DEMO=ON \
	-DMNN_BUILD_BENCHMARK=true \
	-DCMAKE_SYSTEM_NAME=Linux  && \
    make -j3 install 

# build MNN aarch64
RUN cd /MNN && mkdir build_aarch64 && cd build_aarch64 && cmake .. \
    -DCMAKE_INSTALL_PREFIX=/install_aarch64 \
	-DCMAKE_BUILD_TYPE=Release \
	-DMNN_BUILD_DEMO=ON \
	-DMNN_BUILD_BENCHMARK=true \
	-DCMAKE_SYSTEM_NAME=Linux \
	-DCMAKE_SYSTEM_VERSION=1 \
	-DCMAKE_SYSTEM_PROCESSOR=aarch64 \
	-DCMAKE_C_COMPILER=${cross_compile_toolchain}/bin/aarch64-linux-gnu-gcc \
	-DCMAKE_CXX_COMPILER=${cross_compile_toolchain}/bin/aarch64-linux-gnu-g++ && \
	make -j3 install

RUN git clone --depth 1 --branch v1.8.2 https://gitee.com/lyyiangang/spdlog.git
RUn cd /spdlog && mkdir build && cd build &&  cmake \
    -DCMAKE_INSTALL_PREFIX=/install_x86 \
    -DSPDLOG_BUILD_SHARED=ON \
    .. && make -j3 install 
RUn cd /spdlog && mkdir build_aarch64 && cd build_aarch64 &&  cmake \
    -DCMAKE_INSTALL_PREFIX=/install_aarch64 \
    -DSPDLOG_BUILD_SHARED=ON \
	-DCMAKE_C_COMPILER=${cross_compile_toolchain}/bin/aarch64-linux-gnu-gcc \
	-DCMAKE_CXX_COMPILER=${cross_compile_toolchain}/bin/aarch64-linux-gnu-g++ .. && \
    make -j3 install 

RUN apt-get update && apt install -y gdb vim